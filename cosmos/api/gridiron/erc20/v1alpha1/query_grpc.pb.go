// SPDX-License-Identifier: BUSL-1.1
//
// Copyright (C) 2023, Furychain Foundation. All rights reserved.
// Use of this software is govered by the Business Source License included
// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
//
// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
// VERSIONS OF THE LICENSED WORK.
//
// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
//
// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
// TITLE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gridiron/erc20/v1alpha1/query.proto

package erc20v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueryService_ERC20AddressForCoinDenom_FullMethodName = "/gridiron.erc20.v1alpha1.QueryService/ERC20AddressForCoinDenom"
	QueryService_CoinDenomForERC20Address_FullMethodName = "/gridiron.erc20.v1alpha1.QueryService/CoinDenomForERC20Address"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// ERC20AddressForCoinDenom queries the ERC20 token address for a given SDK coin denomination.
	ERC20AddressForCoinDenom(ctx context.Context, in *ERC20AddressForCoinDenomRequest, opts ...grpc.CallOption) (*ERC20AddressForCoinDenomResponse, error)
	// CoinDenomForERC20Address queries the SDK coin denomination for a given ERC20 token address.
	CoinDenomForERC20Address(ctx context.Context, in *CoinDenomForERC20AddressRequest, opts ...grpc.CallOption) (*CoinDenomForERC20AddressResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) ERC20AddressForCoinDenom(ctx context.Context, in *ERC20AddressForCoinDenomRequest, opts ...grpc.CallOption) (*ERC20AddressForCoinDenomResponse, error) {
	out := new(ERC20AddressForCoinDenomResponse)
	err := c.cc.Invoke(ctx, QueryService_ERC20AddressForCoinDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CoinDenomForERC20Address(ctx context.Context, in *CoinDenomForERC20AddressRequest, opts ...grpc.CallOption) (*CoinDenomForERC20AddressResponse, error) {
	out := new(CoinDenomForERC20AddressResponse)
	err := c.cc.Invoke(ctx, QueryService_CoinDenomForERC20Address_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	// ERC20AddressForCoinDenom queries the ERC20 token address for a given SDK coin denomination.
	ERC20AddressForCoinDenom(context.Context, *ERC20AddressForCoinDenomRequest) (*ERC20AddressForCoinDenomResponse, error)
	// CoinDenomForERC20Address queries the SDK coin denomination for a given ERC20 token address.
	CoinDenomForERC20Address(context.Context, *CoinDenomForERC20AddressRequest) (*CoinDenomForERC20AddressResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) ERC20AddressForCoinDenom(context.Context, *ERC20AddressForCoinDenomRequest) (*ERC20AddressForCoinDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20AddressForCoinDenom not implemented")
}
func (UnimplementedQueryServiceServer) CoinDenomForERC20Address(context.Context, *CoinDenomForERC20AddressRequest) (*CoinDenomForERC20AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinDenomForERC20Address not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_ERC20AddressForCoinDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ERC20AddressForCoinDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ERC20AddressForCoinDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ERC20AddressForCoinDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ERC20AddressForCoinDenom(ctx, req.(*ERC20AddressForCoinDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CoinDenomForERC20Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinDenomForERC20AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CoinDenomForERC20Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_CoinDenomForERC20Address_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CoinDenomForERC20Address(ctx, req.(*CoinDenomForERC20AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gridiron.erc20.v1alpha1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ERC20AddressForCoinDenom",
			Handler:    _QueryService_ERC20AddressForCoinDenom_Handler,
		},
		{
			MethodName: "CoinDenomForERC20Address",
			Handler:    _QueryService_CoinDenomForERC20Address_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gridiron/erc20/v1alpha1/query.proto",
}
