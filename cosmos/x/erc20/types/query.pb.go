// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gridiron/erc20/v1alpha1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ERC20AddressForCoinDenomRequest is the request type for the Query/ERC20AddressForCoinDenom RPC method.
type ERC20AddressForCoinDenomRequest struct {
	// denom is the SDK coin denomination to query the address of the ERC20 token for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *ERC20AddressForCoinDenomRequest) Reset()         { *m = ERC20AddressForCoinDenomRequest{} }
func (m *ERC20AddressForCoinDenomRequest) String() string { return proto.CompactTextString(m) }
func (*ERC20AddressForCoinDenomRequest) ProtoMessage()    {}
func (*ERC20AddressForCoinDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffd29a6c0ff3273b, []int{0}
}
func (m *ERC20AddressForCoinDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20AddressForCoinDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20AddressForCoinDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20AddressForCoinDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20AddressForCoinDenomRequest.Merge(m, src)
}
func (m *ERC20AddressForCoinDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *ERC20AddressForCoinDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20AddressForCoinDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20AddressForCoinDenomRequest proto.InternalMessageInfo

func (m *ERC20AddressForCoinDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// ERC20AddressForCoinDenomResponse is the response type for the Query/ERC20AddressForCoinDenom RPC method.
type ERC20AddressForCoinDenomResponse struct {
	// token is the bech32 of the ERC20 token for the given SDK coin denomination.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *ERC20AddressForCoinDenomResponse) Reset()         { *m = ERC20AddressForCoinDenomResponse{} }
func (m *ERC20AddressForCoinDenomResponse) String() string { return proto.CompactTextString(m) }
func (*ERC20AddressForCoinDenomResponse) ProtoMessage()    {}
func (*ERC20AddressForCoinDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffd29a6c0ff3273b, []int{1}
}
func (m *ERC20AddressForCoinDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20AddressForCoinDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20AddressForCoinDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20AddressForCoinDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20AddressForCoinDenomResponse.Merge(m, src)
}
func (m *ERC20AddressForCoinDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *ERC20AddressForCoinDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20AddressForCoinDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20AddressForCoinDenomResponse proto.InternalMessageInfo

func (m *ERC20AddressForCoinDenomResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// CoinDenomForERC20AddressRequest is the request type for the Query/CoinDenomForERC20Address RPC method.
type CoinDenomForERC20AddressRequest struct {
	// token is the bech32 address of the ERC20 token to query the SDK coin denomination for.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *CoinDenomForERC20AddressRequest) Reset()         { *m = CoinDenomForERC20AddressRequest{} }
func (m *CoinDenomForERC20AddressRequest) String() string { return proto.CompactTextString(m) }
func (*CoinDenomForERC20AddressRequest) ProtoMessage()    {}
func (*CoinDenomForERC20AddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffd29a6c0ff3273b, []int{2}
}
func (m *CoinDenomForERC20AddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinDenomForERC20AddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinDenomForERC20AddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinDenomForERC20AddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinDenomForERC20AddressRequest.Merge(m, src)
}
func (m *CoinDenomForERC20AddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *CoinDenomForERC20AddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinDenomForERC20AddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CoinDenomForERC20AddressRequest proto.InternalMessageInfo

func (m *CoinDenomForERC20AddressRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// CoinDenomForERC20AddressResponse is the response type for the Query/CoinDenomForERC20Address RPC method.
type CoinDenomForERC20AddressResponse struct {
	// denom is the SDK coin denomination for the given ERC20 token address.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *CoinDenomForERC20AddressResponse) Reset()         { *m = CoinDenomForERC20AddressResponse{} }
func (m *CoinDenomForERC20AddressResponse) String() string { return proto.CompactTextString(m) }
func (*CoinDenomForERC20AddressResponse) ProtoMessage()    {}
func (*CoinDenomForERC20AddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffd29a6c0ff3273b, []int{3}
}
func (m *CoinDenomForERC20AddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinDenomForERC20AddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinDenomForERC20AddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinDenomForERC20AddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinDenomForERC20AddressResponse.Merge(m, src)
}
func (m *CoinDenomForERC20AddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *CoinDenomForERC20AddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinDenomForERC20AddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CoinDenomForERC20AddressResponse proto.InternalMessageInfo

func (m *CoinDenomForERC20AddressResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*ERC20AddressForCoinDenomRequest)(nil), "gridiron.erc20.v1alpha1.ERC20AddressForCoinDenomRequest")
	proto.RegisterType((*ERC20AddressForCoinDenomResponse)(nil), "gridiron.erc20.v1alpha1.ERC20AddressForCoinDenomResponse")
	proto.RegisterType((*CoinDenomForERC20AddressRequest)(nil), "gridiron.erc20.v1alpha1.CoinDenomForERC20AddressRequest")
	proto.RegisterType((*CoinDenomForERC20AddressResponse)(nil), "gridiron.erc20.v1alpha1.CoinDenomForERC20AddressResponse")
}

func init() {
	proto.RegisterFile("gridiron/erc20/v1alpha1/query.proto", fileDescriptor_ffd29a6c0ff3273b)
}

var fileDescriptor_ffd29a6c0ff3273b = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x4e, 0xea, 0x40,
	0x18, 0x85, 0xe9, 0xbd, 0xe1, 0x26, 0x77, 0xe2, 0xc6, 0x46, 0x0d, 0x12, 0x53, 0x48, 0x57, 0x26,
	0xc6, 0x19, 0xc0, 0x05, 0x6c, 0x01, 0x25, 0xae, 0x34, 0xd6, 0x9d, 0x9b, 0x66, 0x68, 0x47, 0x68,
	0x80, 0xf9, 0xcb, 0x4c, 0x21, 0xb2, 0xf5, 0x09, 0x4c, 0x7c, 0x01, 0x1f, 0xc2, 0x67, 0x30, 0x2e,
	0x89, 0x6e, 0x5c, 0x1a, 0xf0, 0x41, 0x0c, 0x33, 0x85, 0x68, 0x42, 0xd3, 0xb0, 0xfc, 0xd3, 0x73,
	0x4e, 0xcf, 0xf7, 0xcf, 0x0c, 0xb2, 0x43, 0xe8, 0x53, 0x11, 0x48, 0xc2, 0x84, 0x57, 0x29, 0x91,
	0x71, 0x99, 0xf6, 0xc3, 0x2e, 0x2d, 0x93, 0xe1, 0x88, 0x89, 0x09, 0x0e, 0x05, 0x44, 0x60, 0xee,
	0xc5, 0x1a, 0xac, 0x34, 0x78, 0xa9, 0xc9, 0xef, 0x7b, 0x20, 0x07, 0x20, 0x5d, 0xa5, 0x22, 0x7a,
	0xd0, 0x96, 0xfc, 0x41, 0x07, 0xa0, 0xd3, 0x67, 0x84, 0x86, 0x01, 0xa1, 0x9c, 0x43, 0x44, 0xa3,
	0x00, 0x78, 0xfc, 0xd5, 0xae, 0xa2, 0xc2, 0x99, 0xd3, 0xac, 0x94, 0xea, 0xbe, 0x2f, 0x98, 0x94,
	0x2d, 0x10, 0x4d, 0x08, 0xf8, 0x29, 0xe3, 0x30, 0x70, 0xd8, 0x70, 0xc4, 0x64, 0x64, 0xee, 0xa0,
	0xac, 0xbf, 0x98, 0x73, 0x46, 0xd1, 0x38, 0xfc, 0xef, 0xe8, 0xc1, 0xbe, 0x44, 0xc5, 0x64, 0xa3,
	0x0c, 0x81, 0x4b, 0x66, 0x1e, 0xa1, 0x6c, 0x04, 0x3d, 0xc6, 0xb5, 0xb3, 0xb1, 0xfb, 0xf6, 0x7c,
	0xbc, 0x1d, 0x77, 0xab, 0x7b, 0x5e, 0xec, 0x74, 0xb4, 0xc6, 0xbe, 0x40, 0x85, 0x55, 0x42, 0x0b,
	0xc4, 0xcf, 0xf0, 0x65, 0x93, 0x8d, 0xf2, 0x6a, 0xa8, 0x98, 0x9c, 0x17, 0x17, 0x5c, 0x8b, 0x56,
	0x79, 0xfa, 0x8b, 0xb6, 0xae, 0x16, 0x4b, 0xbf, 0x66, 0x62, 0x1c, 0x78, 0xcc, 0x7c, 0x31, 0x50,
	0x2e, 0x09, 0xd6, 0xac, 0xe2, 0xf5, 0x67, 0x82, 0x53, 0xf6, 0x9a, 0xaf, 0x6d, 0x6e, 0xd4, 0xb5,
	0xed, 0xea, 0xfd, 0xfb, 0xd7, 0xe3, 0x9f, 0xb2, 0x49, 0x48, 0xc2, 0x95, 0x51, 0xa3, 0x4b, 0x75,
	0x84, 0x7b, 0x0b, 0xc2, 0x55, 0x64, 0x0a, 0x24, 0x69, 0x29, 0xc9, 0x20, 0x29, 0xc7, 0x92, 0x0c,
	0x92, 0xb6, 0xff, 0x74, 0x10, 0x55, 0x5b, 0x01, 0xfc, 0x42, 0x6a, 0x9c, 0xbf, 0xce, 0x2c, 0x63,
	0x3a, 0xb3, 0x8c, 0xcf, 0x99, 0x65, 0x3c, 0xcc, 0xad, 0xcc, 0x74, 0x6e, 0x65, 0x3e, 0xe6, 0x56,
	0xe6, 0x06, 0x87, 0xbd, 0x0e, 0x6e, 0x33, 0x41, 0xbd, 0x2e, 0x0d, 0x38, 0xf6, 0xd9, 0x78, 0x95,
	0xad, 0xaf, 0x0a, 0xb9, 0x8b, 0x7f, 0x12, 0x4d, 0x42, 0x26, 0xdb, 0xff, 0xd4, 0x3b, 0x38, 0xf9,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xa9, 0x2d, 0x4d, 0x7e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// ERC20AddressForCoinDenom queries the ERC20 token address for a given SDK coin denomination.
	ERC20AddressForCoinDenom(ctx context.Context, in *ERC20AddressForCoinDenomRequest, opts ...grpc.CallOption) (*ERC20AddressForCoinDenomResponse, error)
	// CoinDenomForERC20Address queries the SDK coin denomination for a given ERC20 token address.
	CoinDenomForERC20Address(ctx context.Context, in *CoinDenomForERC20AddressRequest, opts ...grpc.CallOption) (*CoinDenomForERC20AddressResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) ERC20AddressForCoinDenom(ctx context.Context, in *ERC20AddressForCoinDenomRequest, opts ...grpc.CallOption) (*ERC20AddressForCoinDenomResponse, error) {
	out := new(ERC20AddressForCoinDenomResponse)
	err := c.cc.Invoke(ctx, "/gridiron.erc20.v1alpha1.QueryService/ERC20AddressForCoinDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CoinDenomForERC20Address(ctx context.Context, in *CoinDenomForERC20AddressRequest, opts ...grpc.CallOption) (*CoinDenomForERC20AddressResponse, error) {
	out := new(CoinDenomForERC20AddressResponse)
	err := c.cc.Invoke(ctx, "/gridiron.erc20.v1alpha1.QueryService/CoinDenomForERC20Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// ERC20AddressForCoinDenom queries the ERC20 token address for a given SDK coin denomination.
	ERC20AddressForCoinDenom(context.Context, *ERC20AddressForCoinDenomRequest) (*ERC20AddressForCoinDenomResponse, error)
	// CoinDenomForERC20Address queries the SDK coin denomination for a given ERC20 token address.
	CoinDenomForERC20Address(context.Context, *CoinDenomForERC20AddressRequest) (*CoinDenomForERC20AddressResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) ERC20AddressForCoinDenom(ctx context.Context, req *ERC20AddressForCoinDenomRequest) (*ERC20AddressForCoinDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ERC20AddressForCoinDenom not implemented")
}
func (*UnimplementedQueryServiceServer) CoinDenomForERC20Address(ctx context.Context, req *CoinDenomForERC20AddressRequest) (*CoinDenomForERC20AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinDenomForERC20Address not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_ERC20AddressForCoinDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ERC20AddressForCoinDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ERC20AddressForCoinDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gridiron.erc20.v1alpha1.QueryService/ERC20AddressForCoinDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ERC20AddressForCoinDenom(ctx, req.(*ERC20AddressForCoinDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CoinDenomForERC20Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinDenomForERC20AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CoinDenomForERC20Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gridiron.erc20.v1alpha1.QueryService/CoinDenomForERC20Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CoinDenomForERC20Address(ctx, req.(*CoinDenomForERC20AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gridiron.erc20.v1alpha1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ERC20AddressForCoinDenom",
			Handler:    _QueryService_ERC20AddressForCoinDenom_Handler,
		},
		{
			MethodName: "CoinDenomForERC20Address",
			Handler:    _QueryService_CoinDenomForERC20Address_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gridiron/erc20/v1alpha1/query.proto",
}

func (m *ERC20AddressForCoinDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20AddressForCoinDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20AddressForCoinDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ERC20AddressForCoinDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20AddressForCoinDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20AddressForCoinDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinDenomForERC20AddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinDenomForERC20AddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinDenomForERC20AddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinDenomForERC20AddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinDenomForERC20AddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinDenomForERC20AddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ERC20AddressForCoinDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ERC20AddressForCoinDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CoinDenomForERC20AddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CoinDenomForERC20AddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ERC20AddressForCoinDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20AddressForCoinDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20AddressForCoinDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ERC20AddressForCoinDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20AddressForCoinDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20AddressForCoinDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinDenomForERC20AddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinDenomForERC20AddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinDenomForERC20AddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinDenomForERC20AddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinDenomForERC20AddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinDenomForERC20AddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
